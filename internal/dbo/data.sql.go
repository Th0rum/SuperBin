// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: data.sql

package dbo

import (
	"context"
)

const createData = `-- name: CreateData :exec
INSERT INTO data (id, type, fileName, filePath, burn, expire, passwordHash, passwordSalt, encryptSalt)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateDataParams struct {
	ID           string
	Type         string
	Filename     string
	Filepath     string
	Burn         string
	Expire       string
	PasswordHash string
	PasswordSalt string
	EncryptSalt  string
}

func (q *Queries) CreateData(ctx context.Context, arg CreateDataParams) error {
	_, err := q.db.ExecContext(ctx, createData,
		arg.ID,
		arg.Type,
		arg.Filename,
		arg.Filepath,
		arg.Burn,
		arg.Expire,
		arg.PasswordHash,
		arg.PasswordSalt,
		arg.EncryptSalt,
	)
	return err
}

const deleteDataByID = `-- name: DeleteDataByID :exec
DELETE FROM data WHERE id = ?
`

func (q *Queries) DeleteDataByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteDataByID, id)
	return err
}

const getDataByID = `-- name: GetDataByID :one
SELECT type, fileName, filePath, burn, passwordHash, passwordSalt, encryptSalt FROM data WHERE id = ?
`

type GetDataByIDRow struct {
	Type         string
	Filename     string
	Filepath     string
	Burn         string
	PasswordHash string
	PasswordSalt string
	EncryptSalt  string
}

func (q *Queries) GetDataByID(ctx context.Context, id string) (GetDataByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getDataByID, id)
	var i GetDataByIDRow
	err := row.Scan(
		&i.Type,
		&i.Filename,
		&i.Filepath,
		&i.Burn,
		&i.PasswordHash,
		&i.PasswordSalt,
		&i.EncryptSalt,
	)
	return i, err
}

const hasDataWithID = `-- name: HasDataWithID :one
SELECT CAST(EXISTS(SELECT id FROM data WHERE id = ?) AS bool)
`

func (q *Queries) HasDataWithID(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasDataWithID, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const listExpired = `-- name: ListExpired :many
SELECT id, filePath FROM data WHERE expire <= ?
`

type ListExpiredRow struct {
	ID       string
	Filepath string
}

func (q *Queries) ListExpired(ctx context.Context, expire string) ([]ListExpiredRow, error) {
	rows, err := q.db.QueryContext(ctx, listExpired, expire)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListExpiredRow
	for rows.Next() {
		var i ListExpiredRow
		if err := rows.Scan(&i.ID, &i.Filepath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
